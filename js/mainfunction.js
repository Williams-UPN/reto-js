/****************************************************
 * 1) L√ìGICA PARA MOSTRAR/OCULTAR MEN√ö
 ****************************************************/
// Obtenemos el bot√≥n "Menu" y el bot√≥n "Cerrar" (si est√° presente) y el contenedor del men√∫ (aside)
const openMenuButton = document.getElementById('open-menu');
const closeMenuButton = document.getElementById('close-menu');
const asideElement = document.querySelector('aside');

// Cuando se hace clic en "Menu", mostramos el men√∫ lateral a√±adiendo la clase que lo hace visible
openMenuButton.addEventListener('click', () => {
  asideElement.classList.add('aside-visible');
});

// Si el bot√≥n "Cerrar" est√° presente, lo usamos para ocultar el men√∫ removiendo la clase
if (closeMenuButton) {
  closeMenuButton.addEventListener('click', () => {
    asideElement.classList.remove('aside-visible');
  });
}


/****************************************************
 * 2) VARIABLES, ARREGLOS Y FUNCIONES
 ****************************************************/
// Definimos arrays con textos para que los botones tengan t√≠tulos aleatorios y divertidos
const labelsAleatorio = [
  "¬°Sorpresa! üé≤",
  "Azar M√°gico üé≤",
  "¬øQui√©n sale primero? üé≤"
];
const labelsAlfabetico = [
  "A-B-C M√°gico üî§",
  "¬°Letras Geniales! üî§",
  "Alfabeto Sorpresa üî§"
];

// Funci√≥n que elige un elemento aleatorio de un array, para darle un toque din√°mico a los botones
function nombreAleatorio(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// Seleccionamos los botones que activar√°n las funciones de orden aleatorio o alfab√©tico
const btnAleatorio = document.getElementById("btn-aleatorio");
const btnAlfabetico = document.getElementById("btn-alfabetico");

// Asignamos textos aleatorios a los botones para que cada vez que se cargue se vean diferentes
btnAleatorio.textContent = nombreAleatorio(labelsAleatorio);
btnAlfabetico.textContent = nombreAleatorio(labelsAlfabetico);

// Tomamos los primeros 12 pa√≠ses de countriesData, que debe estar definido en countries.js
const slicedCountries = countriesData.slice(0, 12);

// Referenciamos donde mostraremos los pa√≠ses y el t√≠tulo principal que se actualizar√° seg√∫n la acci√≥n
const container = document.getElementById('contenedor-productos');
const tituloPrincipal = document.getElementById('titulo-principal');

// Mapeo para relacionar cada continente con su imagen (SVG)
const continentToSvg = {
  "Africa": "africa.svg",
  "Antarctica": "Antarctica.svg",
  "Asia": "asia.svg",
  "Europe": "europe.svg",
  "Oceania": "oceania.svg",
  "North America": "america.svg",
  "South America": "america.svg"
};

// Funci√≥n que se encarga de mostrar la informaci√≥n de cada pa√≠s en la interfaz
function renderCountries(array) {
  // Limpiamos el contenedor para evitar duplicados
  container.innerHTML = '';
  // Por cada pa√≠s, creamos un div y le asignamos la informaci√≥n necesaria
  array.forEach(country => {
    const name = country.name?.common || 'N/A';
    const capital = country.capital?.[0] || 'N/A';
    const population = country.population?.toLocaleString() || 'N/A';
    const continentsArr = country.continents || [];
    const mainContinent = continentsArr[0] || 'Unknown';

    const countryDiv = document.createElement('div');
    countryDiv.classList.add('country-item');
    countryDiv.innerHTML = `<h2>${name}</h2>`;

    // Guardamos datos importantes en atributos del elemento, para usarlos en el modal
    countryDiv.dataset.countryName = name;
    countryDiv.dataset.countryCapital = capital;
    countryDiv.dataset.countryPopulation = population;
    countryDiv.dataset.countryContinent = mainContinent;

    // A√±adimos el pa√≠s al contenedor
    container.appendChild(countryDiv);
  });
}
// Renderizamos inicialmente los 12 pa√≠ses
renderCountries(slicedCountries);

// Funci√≥n para generar mensajes aleatorios cuando se selecciona la opci√≥n "Aleatorio"
function mensajeAleatorioAleatorio() {
  const opciones = [
    "¬°El azar te sorprende! üò≤",
    "¬°Sorpresa aleatoria, prep√°rate! ü§™",
    "¬°Azar en acci√≥n, disfruta! üòµ",
    "¬°Much√≠sima gente, incre√≠ble! üòÆ",
    "¬°Multitud en acci√≥n, wow! üò≤",
    "¬°Poblaci√≥n m√°xima, prep√°rate! üöÄ"
  ];
  return opciones[Math.floor(Math.random() * opciones.length)];
}

// Funci√≥n para generar mensajes aleatorios para la opci√≥n "Alfab√©tico"
function mensajeAleatorioAlfabetico() {
  const opciones = [
    "¬°Paises en orden, genial! üî†",
    "¬°Alfabeto m√°gico, vamos! ‚ú®",
    "¬°Orden alfab√©tico, descubre m√°s! üìö"
  ];
  return opciones[Math.floor(Math.random() * opciones.length)];
}

// Funci√≥n para mezclar el array de pa√≠ses, usando el algoritmo Fisher-Yates
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}


/****************************************************
 * 3) EVENTOS BOTONES "ALEATORIO" Y "ALFAB√âTICO"
 ****************************************************/
// Al hacer clic en el bot√≥n "Aleatorio"
btnAleatorio.addEventListener('click', () => {
  // Actualizamos el t√≠tulo principal con un mensaje aleatorio
  tituloPrincipal.textContent = mensajeAleatorioAleatorio();
  // Barajamos el array de pa√≠ses para cambiar el orden
  shuffleArray(slicedCountries);
  // Volvemos a mostrar los pa√≠ses en la interfaz
  renderCountries(slicedCountries);
  // Cerramos el men√∫ lateral (si se estaba mostrando)
  asideElement.classList.remove('aside-visible');
});

// Al hacer clic en el bot√≥n "Alfab√©tico"
btnAlfabetico.addEventListener('click', () => {
  // Actualizamos el t√≠tulo principal con un mensaje diferente
  tituloPrincipal.textContent = mensajeAleatorioAlfabetico();
  // Ordenamos el array de pa√≠ses alfab√©ticamente
  slicedCountries.sort((a, b) => {
    const nameA = a.name?.common?.toLowerCase() || '';
    const nameB = b.name?.common?.toLowerCase() || '';
    return nameA.localeCompare(nameB);
  });
  // Renderizamos nuevamente la lista de pa√≠ses ordenados
  renderCountries(slicedCountries);
  // Cerramos el men√∫ lateral autom√°ticamente
  asideElement.classList.remove('aside-visible');
});


/****************************************************
 * 4) L√ìGICA DEL MODAL
 ****************************************************/
// Obtenemos elementos del modal para poder manipularlos
const modal = document.querySelector('.modal');
const closeModal = document.querySelector('.modal__close');
const modalTitle = document.querySelector('.modal__title');
const modalParagraph = document.querySelector('.modal__paragraph');
const continentImg = document.getElementById('continent-image');

// Cuando se hace clic en un pa√≠s, mostramos el modal con su informaci√≥n
container.addEventListener('click', (e) => {
  // Buscamos el elemento padre con la clase "country-item"
  const card = e.target.closest('.country-item');
  if (card) {
    e.preventDefault();

    // Extraemos los datos almacenados en el elemento
    const name = card.dataset.countryName;
    const capital = card.dataset.countryCapital;
    const population = card.dataset.countryPopulation;
    const continent = card.dataset.countryContinent;
    const svgFile = continentToSvg[continent] || 'modal.svg';

    // Rellenamos el contenido del modal con la informaci√≥n del pa√≠s
    modalTitle.textContent = name;
    modalParagraph.innerHTML = `
      <strong>Capital:</strong> ${capital}<br>
      <strong>Poblaci√≥n:</strong> ${population}<br>
      <strong>Continente:</strong> ${continent}
    `;
    // Actualizamos la imagen del continente seg√∫n el pa√≠s seleccionado
    continentImg.src = `images/${svgFile}`;

    // Hacemos visible el modal
    modal.classList.add('modal--show');
  }
});

// Cuando se hace clic en "Cerrar" dentro del modal, lo ocultamos
closeModal.addEventListener('click', (e) => {
  e.preventDefault();
  modal.classList.remove('modal--show');
});

// Si se hace clic fuera del contenedor del modal, tambi√©n lo cerramos
modal.addEventListener('click', (e) => {
  if (e.target === modal) {
    modal.classList.remove('modal--show');
  }
});
